@model mobileHairdresser.Database.tblAppointment
@{
    ViewBag.Title = "getDirections";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
</style>
<div class="ContentContianer">
    <div class="ContentWrapper">
        <h2>Directions To Customer : @Html.DisplayFor(model => model.tblClient.clientName)</h2>
        <p style="display:block;width:80%;margin:0 auto;">Appointment Ref: @Html.DisplayFor(model => model.appointmentID)</p>
        <div id="warnings-panel"></div>
        <div class="mapContainer">
            <div id="map"></div>
        </div>
        <div class="directionsContainer">
            <div id="map-directions"></div>
        </div>
     </div>
</div>
<script>
    function initMap() {
        var markerArray = [];

        // Instantiate a directions service.
        var directionsService = new google.maps.DirectionsService;
        // Create a map and center it on Manhattan.
        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 10,
          center: {lat: 50.3887213, lng: -4.1826667},
        });
        // Create a renderer for directions and bind it to the map.
        var directionsDisplay = new google.maps.DirectionsRenderer({map: map});

        // Instantiate an info window to hold step text.
        var stepDisplay = new google.maps.InfoWindow;

        // Display the route between the initial start and end selections.
        calculateAndDisplayRoute(
            directionsDisplay, directionsService, markerArray, stepDisplay, map);
        // Listen to change events from the start and end lists.
        var onChangeHandler = function() {
          calculateAndDisplayRoute(
              directionsDisplay, directionsService, markerArray, stepDisplay, map);
        };
        directionsDisplay.setPanel(document.getElementById('map-directions'));
      }

      function calculateAndDisplayRoute(directionsDisplay, directionsService,
          markerArray, stepDisplay, map) {
        // First, remove any existing markers from the map.
        for (var i = 0; i < markerArray.length; i++) {
          markerArray[i].setMap(null);
        }        
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var start = {
                    coords: true,
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var end = '@Model.tblClient.clientHouseNumber @Model.tblClient.clientPostalCode';
                directionsService.route({
                    origin: (start.coords) ? new google.maps.LatLng(start.lat, start.lng) : start.address,
                    destination: end,
                    travelMode: 'DRIVING',
                    unitSystem: google.maps.UnitSystem.IMPERIAL,
                    drivingOptions:{
                        departureTime: new Date(Date.now()),
                        trafficModel: 'pessimistic'
                    }
                }, function(response, status) {
                    // Route the directions and pass the response to a function to create
                    // markers for each step.
                    if (status === 'OK') {
                        document.getElementById('warnings-panel').innerHTML =
                            '<b>' + response.routes[0].warnings + '</b>';
                        directionsDisplay.setDirections(response);
                        showSteps(response, markerArray, stepDisplay, map);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
            }, function () {
                handleLocationError(false);
            });
        }
        else {
            handleLocationError(false);
        }
    };
    function handleLocationError(browserHasGeolocation) {
        alert(browserHasGeolocation ?
           'Error : The Geolocation service failed.' :
           'Error : Your browser doesn\'t support geolocation.');
    }

      function showSteps(directionResult, markerArray, stepDisplay, map) {
        // For each step, place a marker, and add the text to the marker's infowindow.
        // Also attach the marker to an array so we can keep track of it and remove it
        // when calculating new routes.
        var myRoute = directionResult.routes[0].legs[0];
        for (var i = 0; i < myRoute.steps.length; i++) {
          var marker = markerArray[i] = markerArray[i] || new google.maps.Marker;
          marker.setMap(map);
          marker.setPosition(myRoute.steps[i].start_location);
          attachInstructionText(
              stepDisplay, marker, myRoute.steps[i].instructions, map);
        }
      }

      function attachInstructionText(stepDisplay, marker, text, map) {
        google.maps.event.addListener(marker, 'click', function() {
          // Open an info window when the marker is clicked on, containing the text
          // of the step.
          stepDisplay.setContent(text);
          stepDisplay.open(map, marker);
        });
      }
</script>
<script async defer
       src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDUpoQg5YkWZM_f2OkPUNycpfSE3sKLxF4&callback=initMap">
</script>